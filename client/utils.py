"""
Utility methods to be used while using the api.
"""

import json
import time
from http.client import responses

import requests


def pretty_print_response(response):
    """Prints the response headers in a pretty way.

    Args:
        response (requests.Response): The response object
    """

    resp = f'-----------RESPONSE-----------\n{response.status_code} ' \
           f'{responses[response.status_code][0].upper()}\n'
    for k, v in response.headers.items():
        resp += f'{k}: {v}\n'

    try:
        resp += f'{json.dumps(response.json(), indent=2)}\n'
    except ValueError:
        resp += f'{response.text}\n'
    resp += '---------END-RESPONSE--------\n'

    print(resp)


def pretty_print_request(req: requests.PreparedRequest):
    """Prints the request headers in a pretty way.

    Args:
        req (requests.Request): The request object
    """

    request = f'-----------REQUEST-----------\n{req.method} {req.url}\n'
    for k, v in req.headers.items():
        request += f'{k}: {v}\n'

    if req.body:
        request += f'{req.body}\n'
    request += '---------END-REQUEST--------\n'

    print(request)


def obfuscate_api_key(key, verbose=False):
    """Generates the obfuscated API key to attach while logging in.

    Args:
        verbose (bool): Defaults to False. If set to True, end result will be printed.
        key (String): The API key

    Returns:
        int: Timestamp of generation
        key: Obfuscated key
    """
    seed = key
    now = int(time.time() * 1000)
    n = str(now)[-6:]
    r = str(int(n) >> 1).zfill(6)
    key = ""
    for i in range(0, len(str(n)), 1):
        key += seed[int(str(n)[i])]
    for j in range(0, len(str(r)), 1):
        key += seed[int(str(r)[j]) + 2]

    if verbose:
        print("Timestamp:", now, "\tKey:", key)

    return now, key


def print_json(obj, indent=4):
    """Prints the JSON object indented to the stdout.

    Args:
        obj (JSON Object): JSON dict or list.
        indent (int, optional): Indent width. Defaults to 4.
    """
    print(json.dumps(obj, indent=indent))


def save_json(obj, path, indent=4):
    """Saves the JSON object to a file.

    Args:
        obj (JSON Object): The JSON object to be saved.
        path (str): The path to the newly created file.
        indent (int, optional): Indent width. Defaults to 4.
    """
    with open(path, 'w') as f:
        json.dump(obj, f, indent=indent)


def get_location_id(location_ids, location):
    """Returns the location ID. Retrieves the information from
    a location dict.

    Args:
        location_ids (dict): Location dictionary that maps every name to its id.
        location (String): Location Name

    Raises:
        ValueError: If the location name was not found in the dict.

    Returns:
        int: Location ID
    """
    for loc in location_ids:
        if loc['name'] == location:
            return loc['id']

    raise ValueError(f'There\'s no location with name {location}.')


def check_response(response: requests.Response, comment: str, expected_code=200):
    """Check response status and returns content if exists. Will distinguish between JSON and the rest.
    Make sure what kind of body you are expecting.

    Args:
        response (requests.Response): The response object.
        comment (str): The string to be printed. Message will display like this:
            \"Request for <comment> successful/unsuccessful.\"
        expected_code (int, optional): Expected return code. Defaults to 200.

    Returns:
        bytes, JSON object or None: Returns the body of the requests.
    """
    if response.status_code == expected_code:
        print("Request for " + comment + " successful.")
        if response.headers['content-type'] == 'application/json':
            return response.json()
        else:
            return response.content
    else:
        print(
            f"Request for {comment} unsuccessful. Error code {response.status_code}.")
        return response.content


def clean_args(args: dict, exemption: list = False) -> dict:
    """Prepares the args of every function in order to add them as parameters to the get request, if needed.
    It removes None and "" values.

    Args:
        exemption: List of keywords to clean from the args dict.
        args (dict): Arguments of the function. Can be generated by calling locals() function before calling this one.

    Returns:
        dict: Cleaned dictionary.
    """
    params = {}

    default_exemptions = ['self', 'full', 'args', 'session']

    if exemption:
        exemption += default_exemptions
    else:
        exemption = default_exemptions

    exemption = set(exemption)

    for k, v in args.items():
        if k in exemption:
            continue

        if v:
            params[k] = v

    return params
